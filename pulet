#!/bin/bash
# Usage: ./pulet help

set -e
dir="$(dirname $(readlink -f $0))"
cd $dir
default_path=$PATH
# get version information from git if git repo is present
if [ -d ./.git ]; then
  git_commitdate1=$(git show -s --format=%ci HEAD)
  git_commitdate=$(date -d "${git_commitdate1}" +%y%m%d)
  git_commitcount=$(git rev-list --count HEAD)
  git_version=$(git describe --always)
fi

# declare SUBCOMMANDS array variable
declare -A SUBCOMMANDS

# default settings, can be overridden in ./pulet.conf, /etc/pulet.conf or ./pulet.conf.local (ignored by git & packing)
installmethod="collection"
environment=production
configversion=0.0.1
package_type="rpm"
package_name="pulet"
package_description="Puppet Control Repo and Helpers"
package_maintainer="UNDEFINED <nobody@example.com>"
package_additional_files=""
version_iteration="${git_commitdate}c${git_commitcount}git${git_version}"

# load settings files
[ -f ./pulet.conf ]       && source ./pulet.conf
[ -f /etc/pulet.conf ]    && source /etc/pulet.conf
[ -f ./pulet.conf.local ] && source ./pulet.conf.local

# environment can be set via ENV.
# export PUPPET_ENVIRONMENT=development
environment=${PUPPET_ENVIRONMENT:-$environment}

# Configuration: Use Puppetlabs collection package? otherwise use bundle
# Override with ENV PUPPET_INSTALLMETHOD or with option -m bundle
installmethod=${PUPPET_INSTALLMETHOD:-$installmethod}

SUBCOMMANDS[help]="         print usage information"
help() {
  echo "Usage: $0 [-m collection|bundle] subcommand [parameters]"
  echo "Valid subcommands:"
  for K in "${!SUBCOMMANDS[@]}"; do echo "$K: ${SUBCOMMANDS[$K]}"; done | sort
}

# private
set_path(){
  export PATH="$default_path:$puppetpath:$dir/bin"
}

# private
install_puppet() {
  echo "installing puppet, method: ${installmethod}" >&2
  # how to install puppet
  # bundle: install as rubygem
  # collection: install puppet collection package.

  if [ "$installmethod" == "bundle" ]; then
    # first run, no bundle commmand
    if ! bundle --version 2>/dev/null;  then
      if [ -f /etc/redhat-release ]; then
        sudo yum clean all
        sudo yum install -y ruby ruby-devel make gcc
      elif [ -f /etc/debian_version ]; then
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev make git gcc
      else
        echo "OS not supported yet"; exit 1
      fi
      gem install bundler --no-ri --no-rdoc
    fi
    unset puppetpath
  elif [ "$installmethod" == "collection" ]; then
    if [ ! -f $puppetpath/puppet ];  then
      if [ -f /etc/redhat-release ]; then
        sudo yum localinstall -y "http://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm"
        sudo yum clean all
        sudo yum install -y puppet-agent
      elif [ -f /etc/debian_version ]; then
        release_codename=$(lsb_release -cs)
        curl -O https://apt.puppetlabs.com/puppetlabs-release-pc1-${release_codename}.deb
        sudo dpkg -i puppetlabs-release-pc1-${release_codename}.deb
        rm puppetlabs-release-pc1-${release_codename}.deb
        sudo apt update
        sudo apt install puppet-agent
      else
        echo "OS not supported yet"; exit 1
      fi
    fi
    if [ ! -f $puppetpath/bundle ];  then
      $puppetpath/gem install bundler --no-ri --no-rdoc
    fi
  fi
} #end install

# private
install_gems(){
  set_path
  echo "Install gems from Gemfile or Gemfile.lock if checked in" >&2
  bundle install --path=.bundle --binstubs=bin
}

# private
install_modules(){
  echo "Install puppet modules" >&2
  librarian install --path ./modules --verbose
}
# private
clean_modules(){
  echo "Clean puppet modules" >&2
  librarian clean --path ./modules --verbose
}

SUBCOMMANDS[librarian]="    librarian-puppet"
librarian() {
  set_path
  bundle exec librarian-puppet "$@"
}
SUBCOMMANDS[bundle]="       bundle with correct environment"
bundle() {
  set_path
  command bundle "$@"
}

SUBCOMMANDS[apply]="        apply the current configuation, can be used as long as there are no changes in external modules."
apply() {
  set_path
  # Run Puppet
  echo "Run Puppet" >&2
  mkdir -p $environment # Puppet 4 requires an environment directory
  # check puppet agent disable lock file
  [ -f /opt/puppetlabs/puppet/cache/state/agent_disabled.lock ] && (
    echo 'Puppet agent disabled - skipping' >&2;
    cat /opt/puppetlabs/puppet/cache/state/agent_disabled.lock >&2; echo >&2;
    exit 1
  )
  # Create lock directory if it doesn't exist
  [ -d /opt/puppetlabs/puppet/cache/state ] || \
    mkdir -p /opt/puppetlabs/puppet/cache/state
  # check and set lockfile for puppet apply
  (
    flock -n 9 || ( echo 'Puppet agent lock file exist - skipping' >&2; exit 1 )
    puppet apply \
      --test \
      --show_diff \
      --write-catalog-summary \
      --modulepath=modules:site \
      --hiera_config=hiera.yaml \
      --environmentpath=. \
      --environment $environment \
      manifests/site.pp "$@"
  ) 9>/opt/puppetlabs/puppet/cache/state/agent_catalog_run.lock
}

SUBCOMMANDS[install]="      install development environment with tools, without apply"
install() {
  install_puppet
  install_gems
  install_modules
}

SUBCOMMANDS[setup]="        install & apply"
setup() {
  install "$@"
  apply "$@"
}

SUBCOMMANDS[package]="      package configuration as rpm"
package() {
  set_path
  export PACKAGING=fpm
  install_gems
  clean_modules
  install_modules
  set -x

  # package
  rm ./build/$package_name -rf
  mkdir -p ./build/$package_name
  cp -a -t ./build/$package_name \
    site \
    hieradata \
    manifests\
    modules \
    Gemfile* \
    Puppetfile* \
    hiera.yaml \
    pulet \
    pulet.conf \
    README.md \
    ${package_additional_files}

  # save version, git is not packaged
  echo $(version) > ./build/$package_name/version

  package_fpm
  rm ./build/$package_name -rf
}

SUBCOMMANDS[version]="      print config_version"
version(){
  # when packaged, version is saved in the version file
  if [ -f ./version ]; then
    cat ./version
  else
    echo "${configversion}-${version_iteration}"
  fi
}

# private
package_fpm() {
  set_path

  bundle exec fpm -s dir -t $package_type \
    -x ".git*" \
    -n $package_name \
    -p ./build/ \
    -v $configversion \
    --iteration "${version_iteration}" \
    -a all \
    --description "$package_description" \
    --maintainer "$package_maintainer" \
    ./build/$package_name=/opt
}

SUBCOMMANDS[facts]="        dump facts using custom facts in modules"
facts() {
  set_path
  # dump all facts with puppet to use custom modulepath
  puppet facts --modulepath=./site:./modules "$@"
}

SUBCOMMANDS[check]="        validate and lint code in site/"
check() {
  set_path
  puppet parser validate ./site && echo "validate OK"
  puppet lint --no-80chars --no-documentation-check ./site && echo "linting OK"
}

## MAIN
# global options (before subcommand)
while getopts :m: opt "$@"; do
  case $opt in
    m) # if -m bundle or -m collection set installmethod and shift options.
      if [[ $OPTARG =~ ^(collection|bundle)$ ]]; then
        echo "Set install mode: $OPTARG" >&2
        installmethod=$OPTARG
        shift $((OPTIND - 1))
      else
        echo "Unknown install mode '$OPTARG', valid options are collection|bundle"
        exit 1
      fi
      ;;
    \?)
      echo "Invalid global option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
if [ $installmethod = "collection" ]; then
  puppetpath="/opt/puppetlabs/puppet/bin"
  installmethod=collection
else
  installmethod=bundle
fi
# if first arg is a defined subcommand, execute it.
command=$1
if [[ "$command" == "" ]]; then
  echo "Missing subcommand" >&2
  help
  exit 1
elif [[ ${SUBCOMMANDS[$command]} == "" ]] ; then
  echo "Invalid subcommand $command" >&2
  help
  exit 1
else

  shift 1
  # continue with command
  "$command" "$@"
fi
